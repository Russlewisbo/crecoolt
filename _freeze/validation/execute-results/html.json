{
  "hash": "83383c4f2906b7d82c16cfd1064e6053",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Validation cohort\"\ndate: \"25/09/2025\"\nformat: \n  html:\n    code-fold: true\n    number-sections: false\nexecute:\n  echo: true\n  warning: false\n  freeze: true\nbibliography: references.bib\ncsl: nature.csl\n---\n\nDescriptive analysis of cumulative incidence of censoring, hospital discharge, CRE infection or death. A competing risk (Fine-Gray) model was fitted to outcome of death, hospital discharge, or CRE infection censored to day 180. The cumulative incidence of competing risks are shown in [@fig-compete].\n\n::: {#fig-compete}\n\n::: {.cell}\n\n```{.r .cell-code}\n# -------------------------------------------------\n# 1. Unadjusted Fineâ€“Gray (CRE infection as event)\n# -------------------------------------------------\nlibrary(prodlim)\nlibrary(riskRegression)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary (here)\n\n\nlibrary(here)\n\n# Load the exported dataset\ndata_extract <- read.csv(here(\"data\", \"data_extract.csv\"), stringsAsFactors = FALSE)\n\n# Quick check\n\nset.seed(123)   # for reproducibility\n\n# ----------------------------\n# 1. Prepare data\n# ----------------------------\ndf_model <- data.frame(\n  time_c = as.numeric(data_extract$time_c),\n  outcome_comp = as.integer(data_extract$outcome_comp)\n) %>%\n  filter(!is.na(time_c) & time_c >= 0)\n\n# ----------------------------\n# 2. Base CIF fit\n# ----------------------------\nci_fit <- prodlim(Hist(time_c, outcome_comp) ~ 1, data = df_model)\n\n# ----------------------------\n# 3. Times to evaluate\n# ----------------------------\ntimes_seq <- seq(0, 180, by = 5)\n\n# ----------------------------\n# 4. Bootstrap CIF estimates\n# ----------------------------\nB <- 200   # number of bootstrap resamples (increase to 1000 for publication)\n\nboot_cif <- function(data, times, cause) {\n  fit <- prodlim(Hist(time_c, outcome_comp) ~ 1, data = data)\n  predict(fit, cause = cause, times = times)\n}\n\nboot_results <- lapply(1:3, function(cause) {\n  mat <- replicate(B, {\n    idx <- sample(nrow(df_model), replace = TRUE)\n    boot_data <- df_model[idx, ]\n    boot_cif(boot_data, times_seq, cause)\n  })\n  # mean and CI across bootstrap runs\n  est <- predict(ci_fit, cause = cause, times = times_seq)\n  lower <- apply(mat, 1, quantile, 0.025, na.rm = TRUE)\n  upper <- apply(mat, 1, quantile, 0.975, na.rm = TRUE)\n  data.frame(times = times_seq, CIF = est, lower = lower, upper = upper,\n             cause = factor(cause))\n})\n\nci_tidy <- bind_rows(boot_results) %>%\n  mutate(cause = recode(cause,\n                        \"1\" = \"CRE infection\",\n                        \"2\" = \"Discharge\",\n                        \"3\" = \"Death\"))\n\n# ----------------------------\n# 5. NEJM-style plot\n# ----------------------------\nnejm_colors <- c(\"CRE infection\" = \"#D81B60\",\n                 \"Discharge\"     = \"#1E88E5\",\n                 \"Death\"         = \"black\")\n\np_nejm <- ggplot(ci_tidy, aes(x = times, y = CIF, color = cause, fill = cause)) +\n  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.15, color = NA) +\n  geom_line(size = 1.2) +\n  labs(x = \"Days since OLT\",\n       y = \"Cumulative incidence\",\n       color = NULL, fill = NULL) +\n  scale_color_manual(values = nejm_colors) +\n  scale_fill_manual(values = nejm_colors) +\n  theme_bw(base_size = 14) +\n  theme(\n    panel.grid = element_blank(),\n    legend.position = \"top\",\n    legend.title = element_blank(),\n    legend.text = element_text(size = 12),\n    axis.title = element_text(size = 14, face = \"bold\"),\n    axis.text = element_text(size = 12),\n    axis.ticks.length = unit(0.2, \"cm\")\n  )\n\nprint(p_nejm)\n```\n\n::: {.cell-output-display}\n![](validation_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nCumulative risk of competing outcomes in combined retrospective and prospective study cohorts\n:::\n\n::: callout-note\n-   Censored without event= 43\n\n-   CRE infection = 263\n\n-   Discharge =466\n\n-   Death = 45\n:::\n",
    "supporting": [
      "validation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}