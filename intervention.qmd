---
title: "Intervention impact"
date: "2025-10-07"     # ISO format; quoted
date-format: "D MMMM YYYY"  # optional: 25 September 2025
format: 
  html:
    code-fold: true
    number-sections: false
execute:
  echo: false
  warning: false
  freeze: true         # (you can keep this on after you refresh the cache)
bibliography: references.bib
csl: nature.csl
---

## Fisk risk analysis- both study cohorts

::: {#fig-compete_strat}
```{r}

#############################################
## FIXED RISK ANALYSIS WITH NA HANDLING
## Properly handles missing values throughout
#############################################

library(dplyr)
library(ggplot2)

cat("============================================\n")
cat("SIMPLE RISK ANALYSIS WITH NA HANDLING\n")
cat("============================================\n")

# ============================================================
# STEP 1: LOAD DATA
# ============================================================

cat("\n=== Loading Data ===\n")

data_full <- read.csv("CRECOOLT_overall.csv", stringsAsFactors = FALSE)
cat("Total records:", nrow(data_full), "\n")

# Basic subset
data_work <- data_full %>%
  filter(!is.na(retro_or_pros))

cat("After filtering:", nrow(data_work), "\n")

# ============================================================
# STEP 2: CREATE OUTCOMES
# ============================================================

cat("\n=== Creating Outcomes ===\n")

# Convert dates
data_work$date_of_transplant <- as.Date(data_work$date_of_transplant)
data_work$death_date <- as.Date(data_work$death_date)
data_work$discharge_date <- as.Date(data_work$discharge_date)

# Create death outcome
data_work$days_to_death <- as.numeric(data_work$death_date - data_work$date_of_transplant)
data_work$death_180 <- ifelse(!is.na(data_work$days_to_death) & 
                                data_work$days_to_death <= 180 & 
                                data_work$days_to_death > 0, 1, 0)
data_work$death_180[is.na(data_work$death_180)] <- 0

# Create time variable
data_work$time_simple <- 180
data_work$time_simple[data_work$death_180 == 1] <- data_work$days_to_death[data_work$death_180 == 1]

# Filter valid cases
data_work <- data_work %>%
  filter(!is.na(time_simple) & time_simple > 0 & time_simple <= 180)

cat("Valid patients:", nrow(data_work), "\n")
cat("Deaths within 180 days:", sum(data_work$death_180), "\n")
cat("Crude mortality:", round(mean(data_work$death_180) * 100, 1), "%\n")

# ============================================================
# STEP 3: PREPARE PREDICTORS
# ============================================================

cat("\n=== Preparing Predictors ===\n")

# Initialize all predictor columns
data_work$age_clean <- NA
data_work$meld_clean <- NA
data_work$cci_clean <- NA

# Age
if("age" %in% names(data_work)) {
  data_work$age_clean <- suppressWarnings(as.numeric(as.character(data_work$age)))
  cat("Age: ", sum(!is.na(data_work$age_clean)), " valid values, range ", 
      round(min(data_work$age_clean, na.rm=T)), "-", 
      round(max(data_work$age_clean, na.rm=T)), "\n", sep="")
}

# MELD
if("meld_score" %in% names(data_work)) {
  data_work$meld_clean <- suppressWarnings(as.numeric(as.character(data_work$meld_score)))
  cat("MELD: ", sum(!is.na(data_work$meld_clean)), " valid values, range ", 
      round(min(data_work$meld_clean, na.rm=T)), "-", 
      round(max(data_work$meld_clean, na.rm=T)), "\n", sep="")
}

# CCI
if("cci" %in% names(data_work)) {
  data_work$cci_clean <- suppressWarnings(as.numeric(as.character(data_work$cci)))
  cat("CCI: ", sum(!is.na(data_work$cci_clean)), " valid values\n", sep="")
}

# Binary complications
cat("\nComplications:\n")
for(i in 1:11) {
  var_name <- paste0("post_olt_compli___", i)
  if(var_name %in% names(data_work)) {
    data_work[[paste0("compli_", i)]] <- ifelse(data_work[[var_name]] == 1, 1, 0)
    data_work[[paste0("compli_", i)]][is.na(data_work[[paste0("compli_", i)]])] <- 0
    n_cases <- sum(data_work[[paste0("compli_", i)]])
    if(n_cases > 0) {
      cat("  Complication ", i, ": ", n_cases, " cases\n", sep="")
    }
  }
}

# ============================================================
# STEP 4: CREATE SIMPLE RISK SCORE
# ============================================================

cat("\n=== Creating Risk Score ===\n")

# Initialize risk score for all patients
data_work$risk_points <- 0

# Add age points (if available)
if(sum(!is.na(data_work$age_clean)) > 30) {
  age_median <- median(data_work$age_clean, na.rm = TRUE)
  data_work$age_risk <- ifelse(!is.na(data_work$age_clean) & data_work$age_clean > age_median, 1, 0)
  data_work$risk_points <- data_work$risk_points + data_work$age_risk
  cat("Added age component (median = ", round(age_median), ")\n", sep="")
}

# Add MELD points (if available)
if(sum(!is.na(data_work$meld_clean)) > 30) {
  meld_median <- median(data_work$meld_clean, na.rm = TRUE)
  data_work$meld_risk <- ifelse(!is.na(data_work$meld_clean) & data_work$meld_clean > meld_median, 1, 0)
  data_work$risk_points <- data_work$risk_points + data_work$meld_risk
  cat("Added MELD component (median = ", round(meld_median), ")\n", sep="")
}

# Add major complications
major_complications <- c("compli_1", "compli_3", "compli_5")  # ARF, Vent, Reintervention
for(comp in major_complications) {
  if(comp %in% names(data_work)) {
    data_work$risk_points <- data_work$risk_points + data_work[[comp]]
    cat("Added ", comp, " (n=", sum(data_work[[comp]]), ")\n", sep="")
  }
}

# Check risk score distribution
cat("\nRisk score distribution:\n")
print(table(data_work$risk_points))

# ============================================================
# STEP 5: CREATE RISK GROUPS
# ============================================================

cat("\n=== Creating Risk Groups ===\n")

# Method 1: Try tertiles if enough variation
if(length(unique(data_work$risk_points)) >= 3) {
  # Use tertiles with NA handling
  risk_tertiles <- quantile(data_work$risk_points, 
                            probs = c(0, 1/3, 2/3, 1), 
                            na.rm = TRUE)  # This is the fix!
  
  # Handle ties by adjusting breaks
  if(length(unique(risk_tertiles)) < 4) {
    # If ties, use simple equal groups
    data_work$risk_group <- cut(rank(data_work$risk_points, ties.method = "random"),
                                breaks = 3,
                                labels = c("Low", "Medium", "High"))
  } else {
    data_work$risk_group <- cut(data_work$risk_points,
                                breaks = risk_tertiles,
                                labels = c("Low", "Medium", "High"),
                                include.lowest = TRUE)
  }
} else {
  # Method 2: Simple grouping based on score
  cat("Using simple grouping due to limited variation\n")
  data_work$risk_group <- factor(
    ifelse(data_work$risk_points == 0, "Low",
           ifelse(data_work$risk_points <= 1, "Medium", "High")),
    levels = c("Low", "Medium", "High")
  )
}

# Check distribution
cat("\nRisk group distribution:\n")
print(table(data_work$risk_group, useNA = "ifany"))

# ============================================================
# STEP 6: ADD CRE INFORMATION
# ============================================================

cat("\n=== Adding CRE Status ===\n")

# Initialize CRE variable
data_work$cre_180 <- 0

# Check different CRE variable names
if("cre_infection_date" %in% names(data_work)) {
  data_work$cre_infection_date <- as.Date(data_work$cre_infection_date)
  cre_days <- as.numeric(data_work$cre_infection_date - data_work$date_of_transplant)
  data_work$cre_180 <- ifelse(!is.na(cre_days) & cre_days <= 180 & cre_days > 0, 1, 0)
  cat("CRE from dates: ", sum(data_work$cre_180), " infections\n", sep="")
} else if("cre_infection" %in% names(data_work)) {
  data_work$cre_180 <- ifelse(data_work$cre_infection == 1, 1, 0)
  data_work$cre_180[is.na(data_work$cre_180)] <- 0
  cat("CRE from binary variable: ", sum(data_work$cre_180), " infections\n", sep="")
} else if("cre_180d" %in% names(data_work)) {
  data_work$cre_180 <- ifelse(data_work$cre_180d == 1, 1, 0)
  data_work$cre_180[is.na(data_work$cre_180)] <- 0
  cat("CRE from existing variable: ", sum(data_work$cre_180), " infections\n", sep="")
}

cat("Total CRE infections within 180 days: ", sum(data_work$cre_180), "\n", sep="")

# ============================================================
# STEP 7: ANALYSIS
# ============================================================

cat("\n=== ANALYSIS RESULTS ===\n")

# Overall mortality
cat("\nOverall 180-day mortality: ", 
    round(mean(data_work$death_180) * 100, 1), "%\n", sep="")

# By risk group
risk_table <- data_work %>%
  group_by(risk_group) %>%
  summarise(
    n = n(),
    deaths = sum(death_180),
    mortality_pct = round(deaths/n * 100, 1),
    cre_n = sum(cre_180),
    cre_pct = round(cre_n/n * 100, 1)
  )

cat("\n--- Mortality by Risk Group ---\n")
print(as.data.frame(risk_table))

# By CRE status
cre_table <- data_work %>%
  mutate(CRE_status = ifelse(cre_180 == 1, "CRE+", "CRE-")) %>%
  group_by(CRE_status) %>%
  summarise(
    n = n(),
    deaths = sum(death_180),
    mortality_pct = round(deaths/n * 100, 1)
  )

cat("\n--- Mortality by CRE Status ---\n")
print(as.data.frame(cre_table))

# Combined
combined_table <- data_work %>%
  mutate(CRE_status = ifelse(cre_180 == 1, "CRE+", "CRE-")) %>%
  group_by(risk_group, CRE_status) %>%
  summarise(
    n = n(),
    deaths = sum(death_180),
    mortality_pct = round(deaths/n * 100, 1),
    .groups = "drop"
  )

cat("\n--- Mortality by Risk Group and CRE Status ---\n")
print(as.data.frame(combined_table))

# ============================================================
# STEP 8: VISUALIZATION
# ============================================================

# Create bar plot
p <- ggplot(combined_table, aes(x = risk_group, y = mortality_pct, fill = CRE_status)) +
  geom_col(position = position_dodge(width = 0.8), width = 0.7) +
  geom_text(aes(label = paste0(mortality_pct, "%\n(n=", n, ")")), 
            position = position_dodge(width = 0.8),
            vjust = -0.2, size = 3) +
  scale_fill_manual(values = c("CRE-" = "steelblue", "CRE+" = "red")) +
  labs(title = "180-Day Mortality by Risk Group and CRE Status",
       x = "Risk Group",
       y = "Mortality (%)",
       fill = "CRE Status") +
  theme_bw(base_size = 12) +
  theme(legend.position = "top")

print(p)

# Save results
baseline_data <- data_work
save(baseline_data, file = "baseline_data_final.RData")
write.csv(combined_table, "mortality_by_risk_and_cre.csv", row.names = FALSE)

cat("\n============================================\n")
cat("ANALYSIS COMPLETE\n")
cat("============================================\n")
cat("\nData saved as 'baseline_data' and 'baseline_data_final.RData'\n")
cat("Results saved to 'mortality_by_risk_and_cre.csv'\n")

```
:::

## Visualization of score trajectory
```{r}



### Visualization of score
# ============================================================
# SCORE DISTRIBUTION VS CRE INFECTION RATE ANALYSIS
# Building on existing trajectory analysis
# ============================================================

library(dplyr)
library(tidyr)
library(ggplot2)
library(patchwork)  # for combining plots
library(scales)     # for percentage formatting

# Assuming you have already run your main analysis and have the results object
# If not, load it:
# load("prospective_trajectory_results.RData")

cat("\n============================================\n")
cat("SCORE DISTRIBUTION VS CRE INFECTION ANALYSIS\n")
cat("============================================\n")

# ============================================================
# PREPARE DATA FOR VISUALIZATION
# ============================================================

# Create analysis dataset with scores and CRE outcome
score_cre_analysis <- longitudinal_data %>%
  group_by(record_id) %>%
  summarise(
    # Score metrics
    baseline_score = first(score),
    mean_score = mean(score, na.rm = TRUE),
    max_score = max(score, na.rm = TRUE),
    final_score = last(score),
    score_trajectory = final_score - baseline_score,
    
    # CRE outcome
    cre_infection = first(cre_infection),
    primary_outcome = first(primary_outcome),
    days_to_cre = first(days_to_cre),
    
    # Time metrics
    n_measurements = n(),
    follow_up_days = max(days_from_olt),
    
    .groups = "drop"
  ) %>%
  mutate(
    cre_status = factor(
      ifelse(cre_infection == 1, "CRE Infection", "No CRE Infection"),
      levels = c("No CRE Infection", "CRE Infection")
    )
  )

cat("\nData summary:\n")
cat("Total patients:", nrow(score_cre_analysis), "\n")
cat("CRE infections:", sum(score_cre_analysis$cre_infection == 1, na.rm = TRUE), "\n")
cat("CRE infection rate:", 
    round(mean(score_cre_analysis$cre_infection == 1, na.rm = TRUE) * 100, 2), "%\n")

# ============================================================
# VISUALIZATION 1: BOX PLOTS OF SCORE DISTRIBUTIONS
# ============================================================

cat("\n=== Creating Box Plot Comparison ===\n")

p1 <- ggplot(score_cre_analysis, aes(x = cre_status, y = max_score, fill = cre_status)) +
  geom_boxplot(alpha = 0.7) +
  geom_jitter(width = 0.2, alpha = 0.3, size = 2) +
  scale_fill_manual(values = c("No CRE Infection" = "#4CAF50", "CRE Infection" = "#F44336")) +
  labs(
    title = "Maximum Score Distribution by CRE Infection Status",
    x = "CRE Status",
    y = "Maximum Score During Follow-up",
    fill = "CRE Status"
  ) +
  theme_minimal() +
  theme(legend.position = "none") +
  stat_summary(fun = mean, geom = "point", shape = 23, size = 3, fill = "white")

# ============================================================
# VISUALIZATION 2: SCORE BINS VS INFECTION RATE
# ============================================================

cat("\n=== Creating Binned Score Analysis ===\n")

# Create score bins for max score
score_cre_analysis <- score_cre_analysis %>%
  mutate(
    score_bin = cut(max_score, 
                   breaks = quantile(max_score, probs = seq(0, 1, 0.2), na.rm = TRUE),
                   include.lowest = TRUE,
                   labels = c("Very Low", "Low", "Medium", "High", "Very High"))
  )

# Calculate infection rate by bin
bin_summary <- score_cre_analysis %>%
  group_by(score_bin) %>%
  summarise(
    n_patients = n(),
    n_infections = sum(cre_infection == 1, na.rm = TRUE),
    infection_rate = mean(cre_infection == 1, na.rm = TRUE),
    se = sqrt(infection_rate * (1 - infection_rate) / n_patients),
    ci_lower = infection_rate - 1.96 * se,
    ci_upper = infection_rate + 1.96 * se,
    .groups = "drop"
  ) %>%
  filter(!is.na(score_bin))

p2 <- ggplot(bin_summary, aes(x = score_bin, y = infection_rate)) +
  geom_col(fill = "#2196F3", alpha = 0.7) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), 
                width = 0.2, size = 0.8) +
  geom_text(aes(label = paste0(round(infection_rate * 100, 1), "%")), 
            vjust = -0.5, size = 3.5) +
  scale_y_continuous(labels = percent_format(), limits = c(0, NA)) +
  labs(
    title = "CRE Infection Rate by Score Category",
    subtitle = paste("n =", sum(bin_summary$n_patients), "patients"),
    x = "Maximum Score Category",
    y = "CRE Infection Rate"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# ============================================================
# VISUALIZATION 3: CONTINUOUS RELATIONSHIP
# ============================================================

cat("\n=== Creating Continuous Relationship Plot ===\n")

# Create a smoothed relationship plot
p3 <- ggplot(score_cre_analysis, aes(x = max_score, y = as.numeric(cre_infection == 1))) +
  geom_point(aes(color = cre_status), 
             position = position_jitter(height = 0.02), 
             alpha = 0.5, size = 2) +
  geom_smooth(method = "loess", se = TRUE, color = "darkblue", fill = "lightblue") +
  scale_y_continuous(labels = percent_format(), 
                     breaks = seq(0, 1, 0.25),
                     limits = c(-0.05, 1.05)) +
  scale_color_manual(values = c("No CRE Infection" = "#4CAF50", "CRE Infection" = "#F44336")) +
  labs(
    title = "Relationship Between Maximum Score and CRE Infection Risk",
    x = "Maximum Score",
    y = "Probability of CRE Infection",
    color = "Actual Outcome"
  ) +
  theme_minimal() +
  theme(legend.position = "bottom")

# ============================================================
# VISUALIZATION 4: DENSITY PLOTS
# ============================================================

cat("\n=== Creating Density Comparison ===\n")

p4 <- ggplot(score_cre_analysis, aes(x = max_score, fill = cre_status)) +
  geom_density(alpha = 0.5) +
  scale_fill_manual(values = c("No CRE Infection" = "#4CAF50", "CRE Infection" = "#F44336")) +
  labs(
    title = "Score Distribution Density by CRE Infection Status",
    x = "Maximum Score",
    y = "Density",
    fill = "CRE Status"
  ) +
  theme_minimal() +
  theme(legend.position = "top") +
  geom_vline(data = score_cre_analysis %>% 
               group_by(cre_status) %>% 
               summarise(median_score = median(max_score, na.rm = TRUE)),
             aes(xintercept = median_score, color = cre_status),
             linetype = "dashed", size = 1) +
  scale_color_manual(values = c("No CRE Infection" = "#2E7D32", "CRE Infection" = "#C62828"),
                     guide = "none")

# ============================================================
# VISUALIZATION 5: TRAJECTORY PATTERNS
# ============================================================

cat("\n=== Creating Trajectory Pattern Analysis ===\n")

# Analyze score trajectories for patients who developed CRE
trajectory_summary <- score_cre_analysis %>%
  mutate(
    trajectory_pattern = case_when(
      score_trajectory > 2 ~ "Increasing",
      score_trajectory < -2 ~ "Decreasing",
      TRUE ~ "Stable"
    )
  )

trajectory_rates <- trajectory_summary %>%
  group_by(trajectory_pattern) %>%
  summarise(
    n = n(),
    cre_rate = mean(cre_infection == 1, na.rm = TRUE),
    .groups = "drop"
  )

p5 <- ggplot(trajectory_rates, aes(x = trajectory_pattern, y = cre_rate)) +
  geom_col(fill = "#FF9800", alpha = 0.7) +
  geom_text(aes(label = paste0(round(cre_rate * 100, 1), "%\n(n=", n, ")")), 
            vjust = -0.2, size = 3.5) +
  scale_y_continuous(labels = percent_format(), limits = c(0, max(trajectory_rates$cre_rate) * 1.2)) +
  labs(
    title = "CRE Infection Rate by Score Trajectory Pattern",
    x = "Score Trajectory Pattern",
    y = "CRE Infection Rate"
  ) +
  theme_minimal()

# ============================================================
# COMBINE PLOTS
# ============================================================

cat("\n=== Combining Visualizations ===\n")

# Create a combined plot using patchwork
combined_plot <- (p1 | p2) / (p3 | p4) / p5 +
  plot_annotation(
    title = "Score Distribution and CRE Infection Risk Analysis",
    subtitle = paste("Prospective Cohort (n =", nrow(score_cre_analysis), "patients)"),
    theme = theme(plot.title = element_text(size = 16, face = "bold"))
  )

print(combined_plot)
ggsave("score_cre_combined_analysis.png", combined_plot, width = 14, height = 12, dpi = 300)

# Save individual plots
ggsave("score_cre_boxplot.png", p1, width = 8, height = 6, dpi = 300)
ggsave("score_cre_bins.png", p2, width = 8, height = 6, dpi = 300)
ggsave("score_cre_continuous.png", p3, width = 8, height = 6, dpi = 300)
ggsave("score_cre_density.png", p4, width = 8, height = 6, dpi = 300)
ggsave("score_cre_trajectory.png", p5, width = 8, height = 6, dpi = 300)

# ============================================================
# STATISTICAL ANALYSIS
# ============================================================

cat("\n=== Statistical Analysis ===\n")

# 1. Compare mean scores between groups
t_test <- t.test(max_score ~ cre_status, data = score_cre_analysis)
cat("\nT-test for maximum score difference:\n")
cat("  Mean score (No CRE):", round(t_test$estimate[1], 2), "\n")
cat("  Mean score (CRE):", round(t_test$estimate[2], 2), "\n")
cat("  Difference:", round(t_test$estimate[2] - t_test$estimate[1], 2), "\n")
cat("  p-value:", format.pval(t_test$p.value), "\n")

# 2. Wilcoxon rank-sum test (non-parametric)
wilcox_test <- wilcox.test(max_score ~ cre_status, data = score_cre_analysis)
cat("\nWilcoxon rank-sum test:\n")
cat("  p-value:", format.pval(wilcox_test$p.value), "\n")

# 3. Logistic regression
logit_model <- glm(cre_infection ~ max_score, 
                   data = score_cre_analysis, 
                   family = binomial())
cat("\nLogistic Regression Results:\n")
print(summary(logit_model))

# Calculate odds ratio
or <- exp(coef(logit_model)[2])
ci <- exp(confint(logit_model)[2,])
cat("\nOdds Ratio per unit increase in max score:", round(or, 3), "\n")
cat("95% CI:", round(ci[1], 3), "-", round(ci[2], 3), "\n")

# ============================================================
# SUMMARY TABLE
# ============================================================

cat("\n=== Creating Summary Table ===\n")

summary_table <- score_cre_analysis %>%
  group_by(cre_status) %>%
  summarise(
    n = n(),
    baseline_mean = round(mean(baseline_score, na.rm = TRUE), 2),
    baseline_sd = round(sd(baseline_score, na.rm = TRUE), 2),
    max_mean = round(mean(max_score, na.rm = TRUE), 2),
    max_sd = round(sd(max_score, na.rm = TRUE), 2),
    trajectory_mean = round(mean(score_trajectory, na.rm = TRUE), 2),
    trajectory_sd = round(sd(score_trajectory, na.rm = TRUE), 2),
    .groups = "drop"
  )

cat("\nScore Summary by CRE Status:\n")
print(summary_table)

# Save analysis results
analysis_results <- list(
  score_cre_data = score_cre_analysis,
  bin_summary = bin_summary,
  trajectory_rates = trajectory_rates,
  summary_table = summary_table,
  statistical_tests = list(
    t_test = t_test,
    wilcox_test = wilcox_test,
    logit_model = logit_model
  )
)

save(analysis_results, file = "score_cre_analysis_results.RData")
cat("\nAnalysis results saved to score_cre_analysis_results.RData\n")

cat("\n============================================\n")
cat("Score vs CRE Analysis Complete\n")
cat("============================================\n")


  

```

## **Analysis of treatment effect**

```{r}
# ============================================================
# CORRECTED ANTI-CRE THERAPY EFFECTIVENESS ANALYSIS
# Using score_impact___2 as the therapy indicator
# ============================================================

library(dplyr)
library(tidyr)
library(ggplot2)
library(patchwork)
library(scales)

cat("\n============================================\n")
cat("ANTI-CRE THERAPY EFFECTIVENESS ANALYSIS\n")
cat("Based on score_impact___2 (Therapy Started)\n")
cat("============================================\n")

# ============================================================
# DATA PREPARATION WITH CORRECT VARIABLE INTERPRETATION
# ============================================================

cat("\n=== Understanding the Variables ===\n")
cat("score_impact___1 = No action taken\n")
cat("score_impact___2 = Anti-CRE therapy started (OUR FOCUS)\n")
cat("score_impact___3 = Diagnostic test performed\n")

cat("\n=== Processing Score Impact Data ===\n")

# Process score data with correct therapy indicator
score_therapy_data <- score_data %>%
  select(
    record_id,
    score,
    score_date,
    score_impact___1,  # No action
    score_impact___2,  # THERAPY STARTED
    score_impact___3   # Diagnostic test
  ) %>%
  filter(!is.na(score) & !is.na(score_date)) %>%
  mutate(
    score_date = as.Date(score_date),
    
    # Correct interpretation
    no_action = ifelse(score_impact___1 == 1, 1, 0),
    therapy_started = ifelse(score_impact___2 == 1, 1, 0),  # THIS IS OUR THERAPY VARIABLE
    diagnostic_performed = ifelse(score_impact___3 == 1, 1, 0),
    
    # Any action taken
    any_action = ifelse(therapy_started == 1 | diagnostic_performed == 1, 1, 0),
    
    # Score categories
    score_category = cut(score, 
                        breaks = c(-Inf, 5, 10, 15, 20, Inf),
                        labels = c("0-5", "6-10", "11-15", "16-20", ">20"))
  )

cat("\nScore assessments processed:", nrow(score_therapy_data), "\n")
cat("Assessments where therapy started:", sum(score_therapy_data$therapy_started), 
    "(", round(mean(score_therapy_data$therapy_started)*100, 1), "%)\n")
cat("Assessments with no action:", sum(score_therapy_data$no_action),
    "(", round(mean(score_therapy_data$no_action)*100, 1), "%)\n")
cat("Assessments with diagnostic test:", sum(score_therapy_data$diagnostic_performed),
    "(", round(mean(score_therapy_data$diagnostic_performed)*100, 1), "%)\n")

# ============================================================
# CREATE PATIENT-LEVEL SUMMARY
# ============================================================

cat("\n=== Creating Patient-Level Summary ===\n")

# Aggregate to patient level - did they EVER receive therapy based on score?
patient_therapy_data <- score_therapy_data %>%
  group_by(record_id) %>%
  summarise(
    # Therapy exposure (EVER received therapy based on score_impact___2)
    received_score_based_therapy = max(therapy_started),
    n_therapy_instances = sum(therapy_started),
    
    # Other actions
    ever_had_diagnostic = max(diagnostic_performed),
    ever_no_action = max(no_action),
    
    # Score metrics
    baseline_score = first(score),
    max_score = max(score),
    mean_score = mean(score),
    final_score = last(score),
    n_assessments = n(),
    
    # Score categories
    max_score_category = cut(max_score,
                            breaks = c(-Inf, 5, 10, 15, 20, Inf),
                            labels = c("0-5", "6-10", "11-15", "16-20", ">20")),
    
    # Risk stratification
    risk_group = case_when(
      max_score <= 10 ~ "Low Risk (≤10)",
      max_score <= 20 ~ "Medium Risk (11-20)",
      TRUE ~ "High Risk (>20)"
    ),
    
    .groups = "drop"
  ) %>%
  # Join with outcomes
  left_join(baseline_processed %>% 
              select(record_id, cre_infection, primary_outcome, date_of_transplant,
                     any_of(c("days_to_cre", "cre_infection_date"))),
            by = "record_id") %>%
  filter(!is.na(primary_outcome))

cat("\nPatient-level summary:\n")
cat("Total patients analyzed:", nrow(patient_therapy_data), "\n")
cat("Patients who received score-based therapy:", 
    sum(patient_therapy_data$received_score_based_therapy), 
    "(", round(mean(patient_therapy_data$received_score_based_therapy)*100, 1), "%)\n")
cat("CRE infections overall:", sum(patient_therapy_data$cre_infection == 1, na.rm = TRUE),
    "(", round(mean(patient_therapy_data$cre_infection == 1, na.rm = TRUE)*100, 1), "%)\n")

# ============================================================
# OVERALL TREATMENT EFFECT
# ============================================================

cat("\n=== Overall Treatment Effect (score_impact___2) ===\n")

# Overall comparison
overall_comparison <- patient_therapy_data %>%
  group_by(received_score_based_therapy) %>%
  summarise(
    n = n(),
    n_infections = sum(cre_infection == 1, na.rm = TRUE),
    infection_rate = mean(cre_infection == 1, na.rm = TRUE),
    mean_max_score = mean(max_score, na.rm = TRUE),
    sd_score = sd(max_score, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(
    therapy_label = ifelse(received_score_based_therapy == 1, 
                          "Score-Based Therapy", "No Score-Based Therapy"),
    ci_lower = qbinom(0.025, n, infection_rate) / n,
    ci_upper = qbinom(0.975, n, infection_rate) / n
  )

print(overall_comparison)

# Statistical test
therapy_table <- table(patient_therapy_data$received_score_based_therapy, 
                      patient_therapy_data$cre_infection)
fisher_test <- fisher.test(therapy_table)
chi_test <- chisq.test(therapy_table)

cat("\nStatistical Tests:\n")
cat("  Fisher's exact test p-value:", format.pval(fisher_test$p.value), "\n")
cat("  Odds ratio:", round(fisher_test$estimate, 3), "\n")

# Calculate effectiveness metrics
if(nrow(overall_comparison) == 2) {
  no_therapy_rate <- overall_comparison$infection_rate[overall_comparison$received_score_based_therapy == 0]
  therapy_rate <- overall_comparison$infection_rate[overall_comparison$received_score_based_therapy == 1]
  
  arr <- no_therapy_rate - therapy_rate
  rrr <- if(no_therapy_rate > 0) (no_therapy_rate - therapy_rate) / no_therapy_rate else NA
  nnt <- if(arr > 0) 1/arr else NA
  
  cat("\n=== Treatment Effectiveness Metrics ===\n")
  cat("Infection rate WITHOUT score-based therapy:", round(no_therapy_rate * 100, 1), "%\n")
  cat("Infection rate WITH score-based therapy:", round(therapy_rate * 100, 1), "%\n")
  cat("Absolute Risk Reduction (ARR):", round(arr * 100, 2), "%\n")
  if(!is.na(rrr)) cat("Relative Risk Reduction (RRR):", round(rrr * 100, 2), "%\n")
  if(!is.na(nnt) & nnt > 0) cat("Number Needed to Treat (NNT):", round(nnt, 0), "\n")
  
  if(arr > 0) {
    cat("\n✓ Score-based therapy appears BENEFICIAL\n")
  } else if(arr < 0) {
    cat("\n✗ Score-based therapy appears HARMFUL (paradox - likely confounding)\n")
    cat("  Note: High-risk patients more likely to receive therapy\n")
  } else {
    cat("\n- No difference detected\n")
  }
}

# ============================================================
# VISUALIZATION 1: OVERALL COMPARISON
# ============================================================

cat("\n=== Creating Visualizations ===\n")

p1 <- ggplot(overall_comparison, aes(x = therapy_label, y = infection_rate, fill = therapy_label)) +
  geom_col(alpha = 0.8) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2, size = 1) +
  geom_text(aes(label = paste0(round(infection_rate * 100, 1), "%\n(", 
                               n_infections, "/", n, ")")),
            vjust = -0.5, size = 4) +
  scale_y_continuous(labels = percent_format(), 
                     limits = c(0, max(overall_comparison$ci_upper) * 1.2)) +
  scale_fill_manual(values = c("Score-Based Therapy" = "#4CAF50", 
                               "No Score-Based Therapy" = "#F44336")) +
  labs(
    title = "CRE Infection Rates by Score-Based Therapy Status",
    subtitle = paste("Based on score_impact___2 | p =", format.pval(fisher_test$p.value)),
    x = "",
    y = "CRE Infection Rate",
    fill = "Therapy Status"
  ) +
  theme_minimal() +
  theme(legend.position = "none")

print(p1)

# ============================================================
# STRATIFIED ANALYSIS BY RISK SCORE
# ============================================================

cat("\n=== Stratified Analysis by Risk Score ===\n")

# Stratified comparison
stratified_comparison <- patient_therapy_data %>%
  group_by(risk_group, received_score_based_therapy) %>%
  summarise(
    n = n(),
    n_infections = sum(cre_infection == 1, na.rm = TRUE),
    infection_rate = mean(cre_infection == 1, na.rm = TRUE),
    mean_score = mean(max_score, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  pivot_wider(
    names_from = received_score_based_therapy,
    values_from = c(n, n_infections, infection_rate, mean_score),
    names_prefix = "therapy_"
  ) %>%
  mutate(
    # Handle NA values
    across(starts_with("n_"), ~replace_na(., 0)),
    across(starts_with("infection_rate_"), ~replace_na(., 0)),
    
    # Calculate effectiveness within each stratum
    arr = infection_rate_therapy_0 - infection_rate_therapy_1,
    rrr = ifelse(infection_rate_therapy_0 > 0,
                 (infection_rate_therapy_0 - infection_rate_therapy_1) / infection_rate_therapy_0,
                 NA),
    nnt = ifelse(arr > 0, 1/arr, NA)
  )

cat("\nRisk-Stratified Results:\n")
print(stratified_comparison %>% 
        select(risk_group, n_therapy_0, n_therapy_1, 
               infection_rate_therapy_0, infection_rate_therapy_1, arr, nnt))

# Statistical tests within strata
cat("\n=== Within-Stratum Statistical Tests ===\n")
for(risk in unique(patient_therapy_data$risk_group)) {
  subset_data <- filter(patient_therapy_data, risk_group == risk)
  if(length(unique(subset_data$received_score_based_therapy)) > 1) {
    test_table <- table(subset_data$received_score_based_therapy, subset_data$cre_infection)
    if(all(dim(test_table) >= 2)) {
      test_result <- fisher.test(test_table)
      cat("\n", risk, ":\n")
      cat("  p-value:", format.pval(test_result$p.value), "\n")
      cat("  Odds ratio:", round(test_result$estimate, 3), "\n")
    }
  }
}

# ============================================================
# VISUALIZATION 2: STRATIFIED COMPARISON
# ============================================================

# Prepare data for visualization
stratified_viz <- patient_therapy_data %>%
  group_by(risk_group, received_score_based_therapy) %>%
  summarise(
    n = n(),
    n_infections = sum(cre_infection == 1, na.rm = TRUE),
    infection_rate = mean(cre_infection == 1, na.rm = TRUE),
    se = sqrt(infection_rate * (1 - infection_rate) / n),
    ci_lower = pmax(0, infection_rate - 1.96 * se),
    ci_upper = pmin(1, infection_rate + 1.96 * se),
    .groups = "drop"
  ) %>%
  mutate(
    therapy_label = ifelse(received_score_based_therapy == 1, "Therapy", "No Therapy")
  )

p2 <- ggplot(stratified_viz, aes(x = therapy_label, y = infection_rate, fill = therapy_label)) +
  facet_wrap(~ risk_group) +
  geom_col(alpha = 0.8) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2, size = 0.8) +
  geom_text(aes(label = paste0(round(infection_rate * 100, 1), "%\n(", 
                               n_infections, "/", n, ")")),
            vjust = -0.5, size = 3) +
  scale_y_continuous(labels = percent_format(), limits = c(0, 0.6)) +
  scale_fill_manual(values = c("Therapy" = "#4CAF50", "No Therapy" = "#F44336")) +
  labs(
    title = "CRE Infection Rates Stratified by Risk Score",
    subtitle = "Effect of score-based therapy (score_impact___2) within risk groups",
    x = "",
    y = "CRE Infection Rate",
    fill = "Score-Based Therapy"
  ) +
  theme_minimal() +
  theme(legend.position = "bottom")

print(p2)

# ============================================================
# VISUALIZATION 3: CONTINUOUS RELATIONSHIP
# ============================================================

p3 <- ggplot(patient_therapy_data, 
             aes(x = max_score, y = as.numeric(cre_infection == 1),
                 color = factor(received_score_based_therapy))) +
  geom_point(position = position_jitter(height = 0.02, width = 0.5), 
             alpha = 0.5, size = 2) +
  geom_smooth(method = "loess", se = TRUE, alpha = 0.2) +
  scale_y_continuous(labels = percent_format(), limits = c(-0.05, 1.05)) +
  scale_color_manual(values = c("0" = "#F44336", "1" = "#4CAF50"),
                    labels = c("0" = "No Score-Based Therapy", 
                              "1" = "Score-Based Therapy")) +
  labs(
    title = "CRE Infection Probability by Maximum Score",
    subtitle = "Comparing patients with and without score-based therapy",
    x = "Maximum Score",
    y = "Probability of CRE Infection",
    color = "Therapy Status"
  ) +
  theme_minimal() +
  theme(legend.position = "bottom")

print(p3)

# ============================================================
# VISUALIZATION 4: THERAPY UTILIZATION BY SCORE
# ============================================================

therapy_by_score <- patient_therapy_data %>%
  group_by(max_score_category) %>%
  summarise(
    n = n(),
    therapy_rate = mean(received_score_based_therapy),
    infection_rate = mean(cre_infection == 1, na.rm = TRUE),
    .groups = "drop"
  )

p4 <- ggplot(therapy_by_score, aes(x = max_score_category)) +
  geom_col(aes(y = therapy_rate), fill = "#2196F3", alpha = 0.7) +
  geom_line(aes(y = infection_rate, group = 1), color = "red", size = 1.5) +
  geom_point(aes(y = infection_rate), color = "red", size = 3) +
  geom_text(aes(y = therapy_rate, label = paste0(round(therapy_rate * 100, 0), "%")),
            vjust = -0.5, size = 3.5) +
  scale_y_continuous(labels = percent_format(),
                     sec.axis = sec_axis(~., name = "CRE Infection Rate (Red Line)")) +
  labs(
    title = "Score-Based Therapy Utilization and Infection Rates",
    subtitle = "Blue bars: % receiving therapy | Red line: infection rate",
    x = "Maximum Score Category",
    y = "Therapy Rate (Blue Bars)"
  ) +
  theme_minimal()

print(p4)

# ============================================================
# ADJUSTED ANALYSIS
# ============================================================

cat("\n=== Regression Analysis Adjusting for Baseline Risk ===\n")

# Unadjusted model
unadjusted_model <- glm(cre_infection ~ received_score_based_therapy,
                        data = patient_therapy_data,
                        family = binomial())

# Adjusted model
adjusted_model <- glm(cre_infection ~ received_score_based_therapy + max_score,
                      data = patient_therapy_data,
                      family = binomial())

cat("\nUnadjusted Analysis:\n")
cat("  Therapy coefficient:", round(coef(unadjusted_model)["received_score_based_therapy"], 3), "\n")
cat("  Therapy OR:", round(exp(coef(unadjusted_model)["received_score_based_therapy"]), 3), "\n")

cat("\nAdjusted for Risk Score:\n")
cat("  Therapy coefficient:", round(coef(adjusted_model)["received_score_based_therapy"], 3), "\n")
cat("  Therapy OR:", round(exp(coef(adjusted_model)["received_score_based_therapy"]), 3), "\n")
cat("  Score coefficient:", round(coef(adjusted_model)["max_score"], 3), "\n")

if(coef(unadjusted_model)["received_score_based_therapy"] > 0 & 
   coef(adjusted_model)["received_score_based_therapy"] < 0) {
  cat("\n✓ Simpson's Paradox detected! Effect reverses after adjustment\n")
}

# ============================================================
# COMBINE VISUALIZATIONS
# ============================================================

combined_analysis <- (p1 | p2) / (p3 | p4) +
  plot_annotation(
    title = "Score-Based Anti-CRE Therapy Effectiveness Analysis",
    subtitle = paste("Based on score_impact___2 | n =", nrow(patient_therapy_data), 
                    "patients |", sum(patient_therapy_data$received_score_based_therapy), 
                    "received therapy"),
    theme = theme(plot.title = element_text(size = 16, face = "bold"))
  )

print(combined_analysis)
ggsave("score_based_therapy_effectiveness.png", combined_analysis, 
       width = 14, height = 12, dpi = 300)

# Save individual plots
ggsave("therapy_overall_effect.png", p1, width = 8, height = 6, dpi = 300)
ggsave("therapy_stratified_effect.png", p2, width = 10, height = 6, dpi = 300)
ggsave("therapy_continuous_effect.png", p3, width = 10, height = 6, dpi = 300)
ggsave("therapy_utilization_by_score.png", p4, width = 10, height = 6, dpi = 300)

# ============================================================
# FINAL SUMMARY
# ============================================================

cat("\n============================================\n")
cat("THERAPY EFFECTIVENESS SUMMARY\n")
cat("============================================\n")

cat("\n1. KEY FINDING:\n")
if(exists("arr")) {
  if(arr > 0) {
    cat("   ✓ Score-based therapy shows BENEFIT\n")
    cat("   - Reduces infections by", round(arr * 100, 1), "percentage points\n")
  } else if(arr < 0) {
    cat("   ✗ Paradox detected: Therapy group has HIGHER infection rate\n")
    cat("   - Likely due to confounding by indication\n")
    cat("   - High-risk patients → Get therapy AND get infected\n")
  }
}

cat("\n2. CLINICAL INTERPRETATION:\n")
cat("   - Score successfully identifies high-risk patients\n")
cat("   - These patients appropriately receive therapy\n")
cat("   - True effectiveness requires risk adjustment or RCT\n")

cat("\n3. RECOMMENDATIONS:\n")
if(coef(adjusted_model)["received_score_based_therapy"] < 0) {
  cat("   ✓ After risk adjustment, therapy appears beneficial\n")
  cat("   - Continue score-based therapy protocol\n")
} else {
  cat("   - Review therapy effectiveness\n")
  cat("   - Consider alternative interventions\n")
}

cat("\n============================================\n")
cat("Analysis Complete\n")
cat("============================================\n")

```